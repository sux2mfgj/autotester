name: "DPDK testpmd Packet Forwarding and Performance Tests"
description: "Comprehensive DPDK testpmd testing scenarios for packet forwarding and generation"
runner: "testpmd"
timeout: 15m
collect_env: true

# Optional: specify custom paths for DPDK binaries
binary_paths:
  testpmd: "/usr/local/bin/dpdk-testpmd"
  # Alternative common paths:
  # testpmd: "/opt/dpdk/bin/dpdk-testpmd"
  # testpmd: "/usr/bin/dpdk-testpmd"

hosts:
  # Traffic generator node
  traffic_generator:
    ssh:
      host: "192.168.1.100"
      user: "testuser"
      key_path: "~/.ssh/id_rsa"
    role: "client"
    # Standard environment for traffic generation
    env:
      LD_LIBRARY_PATH: "/usr/local/lib:/opt/dpdk/lib"
      RTE_SDK: "/opt/dpdk"
      DPDK_LOG_LEVEL: "info"
      
  # DPDK packet forwarder (intermediate node)
  dpdk_forwarder:
    ssh:
      host: "192.168.1.101"
      user: "testuser"
      key_path: "~/.ssh/id_rsa"
    role: "intermediate"
    # DPDK-optimized environment
    env:
      LD_LIBRARY_PATH: "/usr/local/lib:/opt/dpdk/lib"
      RTE_SDK: "/opt/dpdk"
      RTE_TARGET: "x86_64-native-linuxapp-gcc"
      DPDK_LOG_LEVEL: "info"
      RTE_LOG_LEVEL: "info"
      # Performance optimizations
      DPDK_PMD: "net_mlx5,net_i40e"
      
  # Traffic receiver node
  traffic_receiver:
    ssh:
      host: "192.168.1.102"
      user: "testuser"
      key_path: "~/.ssh/id_rsa"
    role: "server"
    # Standard environment for traffic reception
    env:
      LD_LIBRARY_PATH: "/usr/local/lib:/opt/dpdk/lib"
      RTE_SDK: "/opt/dpdk"
      DPDK_LOG_LEVEL: "info"

tests:
  # Test 1: Basic L2 Forwarding
  - name: "Basic L2 Packet Forwarding"
    description: "Simple Layer 2 packet forwarding between two ports"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 60s
      # Common testpmd configuration
      args:
        cores: "0-1"
        memory_channels: 4
        ports: "0,1"
        forward_mode: "io"
        auto_start: true
      
      # Role-specific configurations
      client_args:
        # Client generates packets
        cores: "0-2"
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        forward_mode: "flowgen"
        burst_size: 32
        interactive: false
        
      intermediate_args:
        # Forwarder optimized for high performance
        cores: "0-7"
        memory_channels: 4
        hugepage_dir: "/mnt/huge"
        file_prefix: "fwd"
        allow_pci: ["0000:02:00.0", "0000:02:00.1"]
        ports: "0,1"
        rx_queues: 4
        tx_queues: 4
        rx_descriptors: 2048
        tx_descriptors: 2048
        burst_size: 64
        forward_mode: "io"
        auto_start: true
        stats_period: 5
        interactive: true
        
      server_args:
        # Server receives and counts packets
        cores: "0-2"
        allow_pci: ["0000:03:00.0"]
        ports: "0"
        forward_mode: "rxonly"
        stats_period: 5
        interactive: true

  # Test 2: High Performance Forwarding
  - name: "High Performance L2 Forwarding"
    description: "Optimized forwarding with multiple queues and cores"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 120s
      
      client_args:
        cores: "0-3"
        memory_channels: 4
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        rx_queues: 2
        tx_queues: 2
        rx_descriptors: 1024
        tx_descriptors: 1024
        burst_size: 64
        forward_mode: "flowgen"
        interactive: false
        
      intermediate_args:
        # High performance configuration
        cores: "0-15"                       # Use all 16 cores
        memory_channels: 4
        hugepage_dir: "/mnt/huge"
        file_prefix: "hiperf"
        allow_pci: ["0000:02:00.0", "0000:02:00.1", "0000:04:00.0", "0000:04:00.1"]
        ports: "0,1,2,3"                    # 4 ports for load balancing
        rx_queues: 8                        # 8 RX queues per port
        tx_queues: 8                        # 8 TX queues per port
        rx_descriptors: 4096                # Large ring buffers
        tx_descriptors: 4096
        burst_size: 128                     # Large burst size
        forward_mode: "io"                  # Fastest forwarding mode
        forward_cores: "0xFF"               # Core mask for forwarding cores
        auto_start: true
        stats_period: 1                     # Frequent stats updates
        # Performance optimizations
        disable_rss: false                  # Keep RSS for load distribution
        flow_control: "none"                # Disable flow control
        hw_vlan: true                       # Hardware VLAN support
        crc_strip: true                     # Hardware CRC stripping
        interactive: true
        
      server_args:
        cores: "0-3"
        memory_channels: 4
        allow_pci: ["0000:03:00.0", "0000:03:00.1"]
        ports: "0,1"
        rx_queues: 4
        tx_queues: 4
        rx_descriptors: 2048
        tx_descriptors: 2048
        forward_mode: "rxonly"
        stats_period: 1
        interactive: true

  # Test 3: MAC Address Learning and Forwarding
  - name: "MAC Learning Forwarding"
    description: "Forward packets based on learned MAC addresses"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 90s
      
      client_args:
        cores: "0-2"
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        forward_mode: "flowgen"
        burst_size: 32
        interactive: false
        
      intermediate_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:02:00.0", "0000:02:00.1"]
        ports: "0,1"
        rx_queues: 4
        tx_queues: 4
        rx_descriptors: 1024
        tx_descriptors: 1024
        forward_mode: "mac"                 # MAC address based forwarding
        auto_start: true
        stats_period: 5
        interactive: true
        
      server_args:
        cores: "0-2"
        allow_pci: ["0000:03:00.0"]
        ports: "0"
        forward_mode: "rxonly"
        stats_period: 5
        interactive: true

  # Test 4: VLAN Tag Processing
  - name: "VLAN Tagged Traffic Processing"
    description: "Handle VLAN tagged packets with hardware acceleration"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 75s
      
      client_args:
        cores: "0-2"
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        forward_mode: "flowgen"
        burst_size: 32
        interactive: false
        
      intermediate_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:02:00.0", "0000:02:00.1"]
        ports: "0,1"
        rx_queues: 2
        tx_queues: 2
        rx_descriptors: 1024
        tx_descriptors: 1024
        forward_mode: "macswap"             # MAC swap with VLAN handling
        hw_vlan: true                       # Hardware VLAN processing
        auto_start: true
        stats_period: 5
        interactive: true
        
      server_args:
        cores: "0-2"
        allow_pci: ["0000:03:00.0"]
        ports: "0"
        forward_mode: "rxonly"
        hw_vlan: true
        stats_period: 5
        interactive: true

  # Test 5: Virtual Device Testing
  - name: "Virtual Device Forwarding"
    description: "Test forwarding with virtual TAP devices"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 60s
      
      client_args:
        cores: "0-1"
        memory_channels: 2
        file_prefix: "client_tap"
        vdev: ["net_tap0,iface=tap_client"]
        ports: "0"
        forward_mode: "flowgen"
        burst_size: 16
        interactive: false
        
      intermediate_args:
        cores: "0-3"
        memory_channels: 2
        file_prefix: "fwd_tap"
        # Virtual devices for container/VM environments
        vdev: ["net_tap0,iface=tap_in", "net_tap1,iface=tap_out"]
        ports: "0,1"
        rx_queues: 1
        tx_queues: 1
        rx_descriptors: 512
        tx_descriptors: 512
        forward_mode: "io"
        auto_start: true
        stats_period: 10
        interactive: true
        
      server_args:
        cores: "0-1"
        memory_channels: 2
        file_prefix: "server_tap"
        vdev: ["net_tap0,iface=tap_server"]
        ports: "0"
        forward_mode: "rxonly"
        stats_period: 10
        interactive: true

  # Test 6: Pure Packet Generation Test
  - name: "Packet Generation Performance"
    description: "Measure packet generation capabilities without forwarding"
    client: "traffic_generator"
    server: "traffic_receiver"
    config:
      duration: 45s
      
      client_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:01:00.0", "0000:01:00.1"]
        ports: "0,1"
        rx_queues: 4
        tx_queues: 4
        rx_descriptors: 2048
        tx_descriptors: 2048
        burst_size: 128
        # Flow generation for maximum packet rate
        forward_mode: "flowgen"
        auto_start: true
        stats_period: 5
        interactive: false                   # Non-interactive for automation
        
      server_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:03:00.0", "0000:03:00.1"]
        ports: "0,1"
        rx_queues: 4
        tx_queues: 4
        rx_descriptors: 2048
        tx_descriptors: 2048
        forward_mode: "rxonly"
        stats_period: 5
        interactive: true

  # Test 7: Checksum Offload Testing
  - name: "Hardware Checksum Offload"
    description: "Test hardware checksum calculation and verification"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 60s
      
      client_args:
        cores: "0-2"
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        forward_mode: "flowgen"
        burst_size: 32
        interactive: false
        
      intermediate_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:02:00.0", "0000:02:00.1"]
        ports: "0,1"
        rx_queues: 2
        tx_queues: 2
        rx_descriptors: 1024
        tx_descriptors: 1024
        # Checksum processing mode
        forward_mode: "csum"
        auto_start: true
        stats_period: 5
        hw_vlan: true
        crc_strip: true
        interactive: true
        
      server_args:
        cores: "0-2"
        allow_pci: ["0000:03:00.0"]
        ports: "0"
        forward_mode: "rxonly"
        stats_period: 5
        interactive: true
      
      # Environment variables specific to this test
      intermediate_env:
        DPDK_LOG_LEVEL: "debug"            # More verbose logging for checksum debugging
        RTE_LOG_LEVEL: "debug"

  # Test 8: Multi-Queue Performance
  - name: "Multi-Queue Scaling Test"
    description: "Test performance scaling with multiple RX/TX queues"
    client: "traffic_generator"
    server: "traffic_receiver"
    intermediate: "dpdk_forwarder"
    config:
      duration: 90s
      
      client_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:01:00.0"]
        ports: "0"
        rx_queues: 8
        tx_queues: 8
        rx_descriptors: 1024
        tx_descriptors: 1024
        burst_size: 64
        forward_mode: "flowgen"
        interactive: false
        
      intermediate_args:
        cores: "0-15"
        memory_channels: 4
        hugepage_dir: "/mnt/huge"
        allow_pci: ["0000:02:00.0", "0000:02:00.1"]
        ports: "0,1"
        # Test with many queues
        rx_queues: 16                       # Maximum queues for scaling test
        tx_queues: 16
        rx_descriptors: 1024
        tx_descriptors: 1024
        burst_size: 64
        forward_mode: "io"
        forward_cores: "0xFFFF"             # All cores for forwarding
        auto_start: true
        stats_period: 3
        # RSS for load distribution across queues
        disable_rss: false
        interactive: true
        
      server_args:
        cores: "0-7"
        memory_channels: 4
        allow_pci: ["0000:03:00.0"]
        ports: "0"
        rx_queues: 8
        tx_queues: 8
        rx_descriptors: 1024
        tx_descriptors: 1024
        forward_mode: "rxonly"
        stats_period: 3
        interactive: true